Unit ::= QueryUnit | UpdateUnit

WS ::= ' ' | '\t' | '\n' | '\r'

QueryUnit ::= Query
Query ::= Prologue WS* ( SelectQuery | ConstructQuery | DescribeQuery | AskQuery ) WS* ValuesClause
UpdateUnit ::= Update
Prologue ::= ( BaseDecl | PrefixDecl )*
BaseDecl ::= 'BASE' WS+ IRIREF
PrefixDecl ::= 'PREFIX' WS+ PNAME_NS WS* ( IRIREF | iri )
SelectQuery ::= SelectClause WS* DatasetClause* WS* WhereClause WS* SolutionModifier
SubSelect ::= SelectClause WS* WhereClause WS* SolutionModifier WS* ValuesClause
SelectClause ::= 'SELECT' WS* ( 'DISTINCT' | 'REDUCED' )? WS* ( ( Var WS* | ( '(' Expression 'AS' Var ')' WS* ) )+ | '*' ) WS*
ConstructQuery ::= 'CONSTRUCT' ( ConstructTemplate DatasetClause* WhereClause SolutionModifier | DatasetClause* 'WHERE' '{' TriplesTemplate? '}' SolutionModifier )
DescribeQuery ::= 'DESCRIBE' ( VarOrIri+ | '*' ) DatasetClause* WhereClause? SolutionModifier
AskQuery ::= 'ASK' (WS)* DatasetClause* (WS)* WhereClause (WS)* SolutionModifier
DatasetClause ::= 'FROM' WS* ( DefaultGraphClause | NamedGraphClause )
DefaultGraphClause ::= SourceSelector
NamedGraphClause ::= 'NAMED' WS* SourceSelector
SourceSelector ::= iri
WhereClause ::= 'WHERE'? WS* GroupGraphPattern
SolutionModifier ::= GroupClause? WS* HavingClause? WS* OrderClause? WS* LimitOffsetClauses?
GroupClause ::= 'GROUP' WS* 'BY' WS* GroupCondition+
GroupCondition ::= BuiltInCall | FunctionCall | '(' (WS)* Expression (WS)* ( 'AS' (WS)* Var )? (WS)* ')' (WS)* | Var (WS)*
HavingClause ::= 'HAVING' WS* HavingCondition+
HavingCondition ::= Constraint
OrderClause ::= 'ORDER' WS* 'BY' WS* OrderCondition+
OrderCondition ::= ( ( 'ASC' | 'DESC' ) BrackettedExpression ) | ( Constraint | Var )
LimitOffsetClauses ::= LimitClause OffsetClause? | OffsetClause LimitClause?
LimitClause ::= 'LIMIT' WS* INTEGER
OffsetClause ::= 'OFFSET' WS* INTEGER
ValuesClause ::= ( 'VALUES' WS* DataBlock )?
Update ::= Prologue ( Update1 ( ';' Update )? )?
Update1 ::= Load | Clear | Drop | Add | Move | Copy | Create | InsertData | DeleteData | DeleteWhere | Modify
Load ::= 'LOAD' (WS)* 'SILENT'? (WS)* iri ((WS)* 'INTO' GraphRef )?
Clear ::= (WS)* 'CLEAR' (WS)* 'SILENT'? (WS)* GraphRefAll
Drop ::= 'DROP' (WS)* 'SILENT'? (WS)* GraphRefAll
Create ::= 'CREATE' (WS)* 'SILENT'? (WS)* GraphRef
Add ::= 'ADD' (WS)* 'SILENT'? (WS)* GraphOrDefault (WS)* 'TO' (WS)* GraphOrDefault
Move ::= 'MOVE' (WS)* 'SILENT'? (WS)* GraphOrDefault (WS)* 'TO' (WS)* GraphOrDefault
Copy ::= 'COPY' (WS)* 'SILENT'? (WS)* GraphOrDefault (WS)* 'TO' (WS)* GraphOrDefault
InsertData ::= 'INSERT DATA' WS* QuadData
DeleteData ::= 'DELETE DATA' WS* QuadData
DeleteWhere ::= 'DELETE WHERE' WS*  QuadPattern
Modify ::= ( 'WITH' (WS)* iri (WS)* )? ( DeleteClause (WS)* InsertClause? | InsertClause ) (WS)* UsingClause* (WS)* 'WHERE' (WS)*GroupGraphPattern
DeleteClause ::= 'DELETE' (WS)* QuadPattern
InsertClause ::= 'INSERT' (WS)* QuadPattern
UsingClause ::= 'USING' ( iri | 'NAMED' iri )
GraphOrDefault ::= 'DEFAULT' | 'GRAPH'? iri
GraphRef ::= 'GRAPH' (WS)* iri
GraphRefAll ::= GraphRef | 'DEFAULT' | 'NAMED' | 'ALL'
QuadPattern ::= '{' (WS)* Quads (WS)* '}'
QuadData ::= '{' (WS)* Quads (WS)* '}'
Quads ::= TriplesTemplate? (WS)* ( QuadsNotTriples (WS)* '.'? TriplesTemplate? )*
QuadsNotTriples ::= 'GRAPH' (WS)* VarOrIri '{' TriplesTemplate? '}'
TriplesTemplate ::= TriplesSameSubject (WS)* ( '.' TriplesTemplate? (WS)* )?
GroupGraphPattern ::= '{' (WS)* ( SubSelect | GroupGraphPatternSub ) (WS)* '}'
GroupGraphPatternSub ::= (WS)* TriplesBlock? ( GraphPatternNotTriples '.'? TriplesBlock? )* (WS)*
TriplesBlock ::= TriplesSameSubjectPath (WS)* ( '.' (WS)* TriplesBlock? )?
GraphPatternNotTriples ::= GroupOrUnionGraphPattern | OptionalGraphPattern | MinusGraphPattern | GraphGraphPattern | ServiceGraphPattern | Filter | Bind | InlineData
OptionalGraphPattern ::= 'OPTIONAL' GroupGraphPattern
GraphGraphPattern ::= 'GRAPH' VarOrIri GroupGraphPattern
ServiceGraphPattern ::= 'SERVICE' 'SILENT'? VarOrIri GroupGraphPattern
Bind ::= 'BIND' '(' Expression 'AS' Var ')'
InlineData ::= 'VALUES' DataBlock
DataBlock ::= InlineDataOneVar | InlineDataFull
InlineDataOneVar ::= Var '{' DataBlockValue* '}'
InlineDataFull ::= ( NIL | '(' Var* ')' ) '{' ( '(' DataBlockValue* ')' | NIL )* '}'
DataBlockValue ::= iri |	RDFLiteral |	NumericLiteral |	BooleanLiteral |	'UNDEF'
MinusGraphPattern ::= 'MINUS' GroupGraphPattern
GroupOrUnionGraphPattern ::= GroupGraphPattern ( 'UNION' GroupGraphPattern )*
Filter ::= 'FILTER' Constraint
Constraint ::= BrackettedExpression | BuiltInCall | FunctionCall
FunctionCall ::= iri ArgList
ArgList ::= NIL | '(' 'DISTINCT'? Expression ( ',' Expression )* ')'
ExpressionList ::= NIL | '(' Expression ( ',' Expression )* ')'
ConstructTemplate ::= '{' ConstructTriples? '}'
ConstructTriples ::= TriplesSameSubject ( '.' ConstructTriples? )?
TriplesSameSubject ::= VarOrTerm (WS)* PropertyListNotEmpty |	TriplesNode (WS)* PropertyList
PropertyList ::= PropertyListNotEmpty?
PropertyListNotEmpty ::= Verb (WS)* ObjectList (WS)* ( ';' ( Verb (WS)* ObjectList (WS)* )? )*
Verb ::= VarOrIri | 'a'
ObjectList ::= Object ( ',' Object )*
Object ::= GraphNode
TriplesSameSubjectPath ::= VarOrTerm (WS)* PropertyListPathNotEmpty (WS)* |	TriplesNodePath (WS)* PropertyListPath (WS)*
PropertyListPath ::= PropertyListPathNotEmpty?
PropertyListPathNotEmpty ::= ( VerbPath | VerbSimple ) (WS)* ObjectListPath (WS)* ( ';' (WS)* ( ( VerbPath | VerbSimple ) (WS)* ObjectList (WS)* )? )*
VerbPath ::= Path
VerbSimple ::= Var
ObjectListPath ::= ObjectPath ( ',' ObjectPath )*
ObjectPath ::= GraphNodePath
Path ::= PathAlternative
PathAlternative ::= PathSequence ( '|' PathSequence )*
PathSequence ::= PathEltOrInverse ( '/' PathEltOrInverse )*
PathElt ::= PathPrimary PathMod?
PathEltOrInverse ::= PathElt | '^' PathElt
PathMod ::= '?' | '*' | '+'
PathPrimary ::= iri | 'a' | '!' PathNegatedPropertySet | '(' Path ')'
PathNegatedPropertySet ::= PathOneInPropertySet | '(' ( PathOneInPropertySet ( '|' PathOneInPropertySet )* )? ')'
PathOneInPropertySet ::= iri | 'a' | '^' ( iri | 'a' )
Integer ::= INTEGER
TriplesNode ::= Collection |	BlankNodePropertyList
BlankNodePropertyList ::= '[' PropertyListNotEmpty ']'
TriplesNodePath ::= CollectionPath |	BlankNodePropertyListPath
BlankNodePropertyListPath ::= '[' PropertyListPathNotEmpty ']'
Collection ::= '(' GraphNode+ ')'
CollectionPath ::= '(' GraphNodePath+ ')'
GraphNode ::= VarOrTerm |	TriplesNode
GraphNodePath ::= VarOrTerm |	TriplesNodePath
VarOrTerm ::= Var | GraphTerm
VarOrIri ::= Var | iri
Var ::= VAR1 | VAR2
GraphTerm ::= iri |	RDFLiteral |	NumericLiteral |	BooleanLiteral |	BlankNode |	NIL
Expression ::= ConditionalOrExpression
ConditionalOrExpression ::= ConditionalAndExpression ( '||' ConditionalAndExpression )*
ConditionalAndExpression ::= ValueLogical ( '&&' ValueLogical )*
ValueLogical ::= RelationalExpression
RelationalExpression ::= NumericExpression ( '=' NumericExpression | '!=' NumericExpression | '<' NumericExpression | '>' NumericExpression | '<=' NumericExpression | '>=' NumericExpression | 'IN' ExpressionList | 'NOT' 'IN' ExpressionList )?
NumericExpression ::= AdditiveExpression
AdditiveExpression ::= MultiplicativeExpression ( '+' MultiplicativeExpression | '-' MultiplicativeExpression | ( NumericLiteralPositive | NumericLiteralNegative ) ( ( '*' UnaryExpression ) | ( '/' UnaryExpression ) )* )*
MultiplicativeExpression ::= UnaryExpression ( '*' UnaryExpression | '/' UnaryExpression )*
UnaryExpression ::= '!' PrimaryExpression |	'+' PrimaryExpression |	'-' PrimaryExpression |	PrimaryExpression
PrimaryExpression ::= BrackettedExpression | BuiltInCall | iriOrFunction | RDFLiteral | NumericLiteral | BooleanLiteral | Var
BrackettedExpression ::= '(' Expression ')'
BuiltInCall ::=  Aggregate |	'STR' '(' Expression ')' |	'LANG' '(' Expression ')' |	'LANGMATCHES' '(' Expression ',' Expression ')' |	'DATATYPE' '(' Expression ')' |	'BOUND' '(' Var ')' |	'IRI' '(' Expression ')' |	'URI' '(' Expression ')' |	'BNODE' ( '(' Expression ')' | NIL ) |	'RAND' NIL |	'ABS' '(' Expression ')' |	'CEIL' '(' Expression ')' |	'FLOOR' '(' Expression ')' |	'ROUND' '(' Expression ')' |	'CONCAT' ExpressionList |	SubstringExpression |	'STRLEN' '(' Expression ')' |	StrReplaceExpression |	'UCASE' '(' Expression ')' |	'LCASE' '(' Expression ')' |	'ENCODE_FOR_URI' '(' Expression ')' |	'CONTAINS' '(' Expression ',' Expression ')' |	'STRSTARTS' '(' Expression ',' Expression ')' |	'STRENDS' '(' Expression ',' Expression ')' |	'STRBEFORE' '(' Expression ',' Expression ')' |	'STRAFTER' '(' Expression ',' Expression ')' |	'YEAR' '(' Expression ')' |	'MONTH' '(' Expression ')' |	'DAY' '(' Expression ')' |	'HOURS' '(' Expression ')' |	'MINUTES' '(' Expression ')' |	'SECONDS' '(' Expression ')' |	'TIMEZONE' '(' Expression ')' |	'TZ' '(' Expression ')' |	'NOW' NIL |	'UUID' NIL |	'STRUUID' NIL |	'MD5' '(' Expression ')' |	'SHA1' '(' Expression ')' |	'SHA256' '(' Expression ')' |	'SHA384' '(' Expression ')' |	'SHA512' '(' Expression ')' |	'COALESCE' ExpressionList |	'IF' '(' Expression ',' Expression ',' Expression ')' |	'STRLANG' '(' Expression ',' Expression ')' |	'STRDT' '(' Expression ',' Expression ')' |	'sameTerm' '(' Expression ',' Expression ')' |	'isIRI' '(' Expression ')' |	'isURI' '(' Expression ')' |	'isBLANK' '(' Expression ')' |	'isLITERAL' '(' Expression ')' |	'isNUMERIC' '(' Expression ')' |	RegexExpression |	ExistsFunc |	NotExistsFunc
RegexExpression ::= 'REGEX' '(' Expression ',' Expression ( ',' Expression )? ')'
SubstringExpression ::= 'SUBSTR' '(' Expression ',' Expression ( ',' Expression )? ')'
StrReplaceExpression ::= 'REPLACE' '(' Expression ',' Expression ',' Expression ( ',' Expression )? ')'
ExistsFunc ::= 'EXISTS' GroupGraphPattern
NotExistsFunc ::= 'NOT' 'EXISTS' GroupGraphPattern
Aggregate ::= 'COUNT' '(' 'DISTINCT'? ( '*' | Expression ) ')' | 'SUM' '(' 'DISTINCT'? Expression ')' | 'MIN' '(' 'DISTINCT'? Expression ')' | 'MAX' '(' 'DISTINCT'? Expression ')' | 'AVG' '(' 'DISTINCT'? Expression ')' | 'SAMPLE' '(' 'DISTINCT'? Expression ')' | 'GROUP_CONCAT' '(' 'DISTINCT'? Expression ( ';' 'SEPARATOR' '=' String )? ')'



iriOrFunction ::= iri ArgList?
RDFLiteral ::= String ( LANGTAG | ( '^^' iri ) )?
NumericLiteral ::= NumericLiteralUnsigned | NumericLiteralPositive | NumericLiteralNegative
NumericLiteralUnsigned ::= INTEGER |	DECIMAL |	DOUBLE
NumericLiteralPositive ::= INTEGER_POSITIVE |	DECIMAL_POSITIVE |	DOUBLE_POSITIVE
NumericLiteralNegative ::= INTEGER_NEGATIVE |	DECIMAL_NEGATIVE |	DOUBLE_NEGATIVE
BooleanLiteral ::= 'true' |	'false'
String ::= STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | STRINGHTTP
iri ::= IRIREF |	PrefixedName | IRIHTTP
PrefixedName ::= PNAME_LN | PNAME_NS
BlankNode ::= BLANK_NODE_LABEL | ANON

IRIREF ::= '<' ('^' | '<' | '>' | '\"' | '{' | '}' | '|' | '^' | '`' | '\\' | ')' | ' ' | '' | '' | '' | '' | '' | '' | '' | '' | '\t' | '\n' | '' | '' | '' | '' | '' | '' | '' | '' | '' | '' | '' | '' | '' | '' | '' | '' | '' | '' | '' | '' | '' | ' ')* '>'
PNAME_NS ::= PN_PREFIX? ':'
PNAME_LN ::= PNAME_NS PN_LOCAL
BLANK_NODE_LABEL ::= '_:' ( PN_CHARS_U | ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') ) ((PN_CHARS|'.')* PN_CHARS)?
VAR1	::= '?' VARNAME
VAR2 ::=	'$' VARNAME
LANGTAG ::= '@' ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z')+ ('-' ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+)*
INTEGER ::= ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+
DECIMAL ::= ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+
DOUBLE ::= ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')* EXPONENT | '.' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ EXPONENT | ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+ EXPONENT
INTEGER_POSITIVE ::= '+' INTEGER
DECIMAL_POSITIVE ::= '+' DECIMAL
DOUBLE_POSITIVE ::= '+' DOUBLE
INTEGER_NEGATIVE ::= '-' INTEGER
DECIMAL_NEGATIVE ::='-' DECIMAL
DOUBLE_NEGATIVE	::=	'-' DOUBLE
EXPONENT ::= ('e' | 'E') ('+' | '-')? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9')+
STRING_LITERAL1 ::= "'" ( ("'" | '\\' | '\n' | '\r') | ECHAR )* "'"
STRING_LITERAL2 ::= '\"' ( ('\"' | '\\' | '\n' | '\r') | ECHAR )* '\"'
STRING_LITERAL_LONG1 ::= "'''" ( ( "'" | "''" )? ( ("^" | "'" | "\\") | ECHAR ) )* "'''"
STRING_LITERAL_LONG2 ::= '\"\"\"' ( ( '\"' | '\"\"' )? ( ('^' | '\"' | '\\' ) | ECHAR ) )* '\"\"\"'
ECHAR ::= '\\' ('t' | 'b' | 'n' | 'r' | 'f' | '\\' | '\"' | "'")
NIL ::= '(' WS* ')'
WS ::= ' ' | '\t' | '\r' | '\n'
ANON	  ::=  	'[' WS* ']'
PN_CHARS_BASE ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'
PN_CHARS_U ::= PN_CHARS_BASE | '_'
VARNAME	  ::=  	( PN_CHARS_U | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') ( PN_CHARS_U | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '·' | '̀' | '́' | '̂' | '̃' | '̄' | '̅' | '̆' | '̇' | '̈' | '̉' | '̊' | '̋' | '̌' | '̍' | '̎' | '̏' | '̐' | '̑' | '̒' | '̓' | '̔' | '̕' | '̖' | '̗' | '̘' | '̙' | '̚' | '̛' | '̜' | '̝' | '̞' | '̟' | '̠' | '̡' | '̢' | '̣' | '̤' | '̥' | '̦' | '̧' | '̨' | '̩' | '̪' | '̫' | '̬' | '̭' | '̮' | '̯' | '̰' | '̱' | '̲' | '̳' | '̴' | '̵' | '̶' | '̷' | '̸' | '̹' | '̺' | '̻' | '̼' | '̽' | '̾' | '̿' | '̀' | '́' | '͂' | '̓' | '̈́' | 'ͅ' | '͆' | '͇' | '͈' | '͉' | '͊' | '͋' | '͌' | '͍' | '͎' | '͏' | '͐' | '͑' | '͒' | '͓' | '͔' | '͕' | '͖' | '͗' | '͘' | '͙' | '͚' | '͛' | '͜' | '͝' | '͞' | '͟' | '͠' | '͡' | '͢' | 'ͣ' | 'ͤ' | 'ͥ' | 'ͦ' | 'ͧ' | 'ͨ' | 'ͩ' | 'ͪ' | 'ͫ' | 'ͬ' | 'ͭ' | 'ͮ' | 'ͯ' | '‿' | '⁀'
 )*
 PN_CHARS ::= PN_CHARS_U | '-' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '·' | '̀' | '́' | '̂' | '̃' | '̄' | '̅' | '̆' | '̇' | '̈' | '̉' | '̊' | '̋' | '̌' | '̍' | '̎' | '̏' | '̐' | '̑' | '̒' | '̓' | '̔' | '̕' | '̖' | '̗' | '̘' | '̙' | '̚' | '̛' | '̜' | '̝' | '̞' | '̟' | '̠' | '̡' | '̢' | '̣' | '̤' | '̥' | '̦' | '̧' | '̨' | '̩' | '̪' | '̫' | '̬' | '̭' | '̮' | '̯' | '̰' | '̱' | '̲' | '̳' | '̴' | '̵' | '̶' | '̷' | '̸' | '̹' | '̺' | '̻' | '̼' | '̽' | '̾' | '̿' | '̀' | '́' | '͂' | '̓' | '̈́' | 'ͅ' | '͆' | '͇' | '͈' | '͉' | '͊' | '͋' | '͌' | '͍' | '͎' | '͏' | '͐' | '͑' | '͒' | '͓' | '͔' | '͕' | '͖' | '͗' | '͘' | '͙' | '͚' | '͛' | '͜' | '͝' | '͞' | '͟' | '͠' | '͡' | '͢' | 'ͣ' | 'ͤ' | 'ͥ' | 'ͦ' | 'ͧ' | 'ͨ' | 'ͩ' | 'ͪ' | 'ͫ' | 'ͬ' | 'ͭ' | 'ͮ' | 'ͯ' | '‿' | '⁀'
PN_PREFIX ::= PN_CHARS_BASE ((PN_CHARS|'.')* PN_CHARS)?
PN_LOCAL ::= (PN_CHARS_U | ':' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | PLX ) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX) )?
PERCENT ::= '%' HEX HEX
PLX ::= PERCENT | PN_LOCAL_ESC
HEX ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'a' |'b' | 'c' | 'd' | 'e' | 'f'
PN_LOCAL_ESC ::= '\\' ( '_' | '~' | '.' | '-' | '!' | '$' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%' )

IRIHTTP ::= '<http' ('s')? '://' ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '%' | '$' | '*' | '(' | ')' | '/' | ':' | '.' | '-' | '_' | '+' | '=' | '&' | '^' | '#' | '?')* '>'
STRINGHTTP ::= '\"' ('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '`' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '-' | '=' | '+' | '_' | ')' | '(' | '*' | '&' | '^' | '%' | '$' | '#' | '@' | '!' | '~' | '[' | ']' | '\\' | ';' | "'" | ',' | '.' | '/' | '{' | '}' | '|' | ':' | '<' | '>' | '?' | ' ' | '\r' | '\t' | '\n' | '\\\"')* '\"'